{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview This plugin is made for data quality enthusiasts! Access and manage the metadata of your notes in Obsidian . Metadata In Obsidian, metadatas are information defined in Yaml syntax in the front matter section of a note. Metadata are very convenient to categorize notes and make queries to find them. Some plugins have leveraged metadata to make advanced queries against your vault, such as Dataview . Dataview has also introduce a new syntax to define metadata anywhere in a note (not only in frontmatter but also in the body of the note) with the syntax fieldName::value Metadata Menu adds context menu items to modifiy target note's frontmatter fields and \"inline fields\" ( dataview syntax) by right-clicking on the link, accessing options in the command palette, or within dataview tables. You can define preset types and values for those fields globally in the plugin's settings or on a file-by-file basis thanks to fileClass definition It also enables frontmatter of inline-field autocompletion with suggested values based on preset values. demo 1 : basic features, settings and field types demo 2 : autocompletion and \"in sentence\" fields commands demo 3 : File type fields demo 4 : Date type fields demo 5 : Templates for Input type fields: demo 6 : FileClass demo 7 : Time shifting for spaced repetition or date postponing demo 8 : Lookup fields demo 9 : Lookup fields as bullet list demo 10 : Better Select and File fields demo 11 : Supercharged Tags, multi fileClasses and metadata button demo 12","title":"Overview"},{"location":"#overview","text":"This plugin is made for data quality enthusiasts! Access and manage the metadata of your notes in Obsidian . Metadata In Obsidian, metadatas are information defined in Yaml syntax in the front matter section of a note. Metadata are very convenient to categorize notes and make queries to find them. Some plugins have leveraged metadata to make advanced queries against your vault, such as Dataview . Dataview has also introduce a new syntax to define metadata anywhere in a note (not only in frontmatter but also in the body of the note) with the syntax fieldName::value Metadata Menu adds context menu items to modifiy target note's frontmatter fields and \"inline fields\" ( dataview syntax) by right-clicking on the link, accessing options in the command palette, or within dataview tables. You can define preset types and values for those fields globally in the plugin's settings or on a file-by-file basis thanks to fileClass definition It also enables frontmatter of inline-field autocompletion with suggested values based on preset values. demo 1 : basic features, settings and field types demo 2 : autocompletion and \"in sentence\" fields commands demo 3 : File type fields demo 4 : Date type fields demo 5 : Templates for Input type fields: demo 6 : FileClass demo 7 : Time shifting for spaced repetition or date postponing demo 8 : Lookup fields demo 9 : Lookup fields as bullet list demo 10 : Better Select and File fields demo 11 : Supercharged Tags, multi fileClasses and metadata button demo 12","title":"Overview"},{"location":"api/","text":"Api API is accessible with app.plugins.plugins[\"metadata-menu\"].api getValues getValues(fileOrFilePath: TFile | string, attribute: string) Takes a TFile containing the field and a string for the related field name Returns an array with the values of the field This is an asynchronous function, so you should await it. replaceValues replaceValues(fileOrFilePath: TFile | string, attribute: string, input: string) Takes a TFile containing the field, a string for the related field name, a new value for this field and updates the field with the new value This is an asynchronous function, so you should await it. insertValues insertValues(fileOrFilePath: TFile | string, attribute: string, value: string, lineNumber: number, inFrontmatter: boolean, top: boolean) Takes a TFile, a string for the field name, a value for this field and insert the formatted field in the file at the line specified. You'll have to specify if the field will be in frontmatter to apply YAML syntax This is an asynchronous function, so you should await it. fieldModifier fieldModifier(dv: any, p: any, fieldName: string, attrs?: { cls: string, attr: Record<string, string> }) Takes a dataview api instance, a page, a field name and optional attributes and returns a HTML element to modify the value of the field in the target note fileFields fileFields(fileOrFilePath: TFile | string) Takes a TFile or e filePath and returns all the fields in the document, both frontmatter and dataview fields, and returns a collection of analysis of those fields by metadatamenu: { ( fieldName : string ) : { /* the value of the field in the file */ value : string | undefined , /* unicity of the field in the note: if false it means that this field appears more than once in the file */ unique : boolean , /* the fileClass name applied to this field if there is a fileClass AND if the field is set in the fileClass or the fileClass it's inheriting from */ fileClass : string | undefined , /* the fileClass query applied to this field if there is a fileClass AND if the file matches the query attached to this fileClass in the settings AND if the field is set in the fileClass or the fileClass it's inheriting from */ fileClassQuery : string | undefined /* true if this fieldName is in \"Globally ignored fields\" in the plugin settings */ ignoreInMenu : boolean | undefined , /* true if this field as a setting defined in the plugin settings or a fileClass and if the value is valid according to those settings */ isValid : boolean | undefined , /* an object containing the options available for this field according to the plugin settings or the fileClass */ options : Record < string , string > | undefined , /* wether the settings applied to this field come from a fileClass, the plugin settings or none */ sourceType : \"fileClass\" | \"settings\" | undefined , /* the type of the field according to the plugin settings or the fileClass */ type : \"Input\" | \"Select\" | \"Multi\" | \"Cycle\" | \"Boolean\" | \"Number\" | undefined /* the note containing the values for multi, cycle or select types when defined in the plugin settings */ valuesListNotePath : string | undefined } } insertMissingFields insertMissingFields: (fileOrFilePath: string | TFile, lineNumber: number, inFrontmatter: boolean, after: boolean, asList: boolean, asComment: boolean, fileClassName?: string) Takes: - a TFile or its path, - a line number, - asks wether insertion is in frontmatter (default : false), - asks wether insertion is in after the line (default : false), - asks wether insertion is as list (prepends - ) (default : false), - asks wether insertion is as comment (prepends > ) (default : false), - asks wether insertion should only deal with one single fileClass' fields (default: all) Inserts all missings fields of all (or one specified) fileClass fields at the line, with the format This is an asynchronous function, so you should await it.","title":"API"},{"location":"api/#api","text":"API is accessible with app.plugins.plugins[\"metadata-menu\"].api","title":"Api"},{"location":"api/#getvalues","text":"getValues(fileOrFilePath: TFile | string, attribute: string) Takes a TFile containing the field and a string for the related field name Returns an array with the values of the field This is an asynchronous function, so you should await it.","title":"getValues"},{"location":"api/#replacevalues","text":"replaceValues(fileOrFilePath: TFile | string, attribute: string, input: string) Takes a TFile containing the field, a string for the related field name, a new value for this field and updates the field with the new value This is an asynchronous function, so you should await it.","title":"replaceValues"},{"location":"api/#insertvalues","text":"insertValues(fileOrFilePath: TFile | string, attribute: string, value: string, lineNumber: number, inFrontmatter: boolean, top: boolean) Takes a TFile, a string for the field name, a value for this field and insert the formatted field in the file at the line specified. You'll have to specify if the field will be in frontmatter to apply YAML syntax This is an asynchronous function, so you should await it.","title":"insertValues"},{"location":"api/#fieldmodifier","text":"fieldModifier(dv: any, p: any, fieldName: string, attrs?: { cls: string, attr: Record<string, string> }) Takes a dataview api instance, a page, a field name and optional attributes and returns a HTML element to modify the value of the field in the target note","title":"fieldModifier"},{"location":"api/#filefields","text":"fileFields(fileOrFilePath: TFile | string) Takes a TFile or e filePath and returns all the fields in the document, both frontmatter and dataview fields, and returns a collection of analysis of those fields by metadatamenu: { ( fieldName : string ) : { /* the value of the field in the file */ value : string | undefined , /* unicity of the field in the note: if false it means that this field appears more than once in the file */ unique : boolean , /* the fileClass name applied to this field if there is a fileClass AND if the field is set in the fileClass or the fileClass it's inheriting from */ fileClass : string | undefined , /* the fileClass query applied to this field if there is a fileClass AND if the file matches the query attached to this fileClass in the settings AND if the field is set in the fileClass or the fileClass it's inheriting from */ fileClassQuery : string | undefined /* true if this fieldName is in \"Globally ignored fields\" in the plugin settings */ ignoreInMenu : boolean | undefined , /* true if this field as a setting defined in the plugin settings or a fileClass and if the value is valid according to those settings */ isValid : boolean | undefined , /* an object containing the options available for this field according to the plugin settings or the fileClass */ options : Record < string , string > | undefined , /* wether the settings applied to this field come from a fileClass, the plugin settings or none */ sourceType : \"fileClass\" | \"settings\" | undefined , /* the type of the field according to the plugin settings or the fileClass */ type : \"Input\" | \"Select\" | \"Multi\" | \"Cycle\" | \"Boolean\" | \"Number\" | undefined /* the note containing the values for multi, cycle or select types when defined in the plugin settings */ valuesListNotePath : string | undefined } }","title":"fileFields"},{"location":"api/#insertmissingfields","text":"insertMissingFields: (fileOrFilePath: string | TFile, lineNumber: number, inFrontmatter: boolean, after: boolean, asList: boolean, asComment: boolean, fileClassName?: string) Takes: - a TFile or its path, - a line number, - asks wether insertion is in frontmatter (default : false), - asks wether insertion is in after the line (default : false), - asks wether insertion is as list (prepends - ) (default : false), - asks wether insertion is as comment (prepends > ) (default : false), - asks wether insertion should only deal with one single fileClass' fields (default: all) Inserts all missings fields of all (or one specified) fileClass fields at the line, with the format This is an asynchronous function, so you should await it.","title":"insertMissingFields"},{"location":"controls/","text":"Controls Control field with autocompletion In Editor mode, type \":\" after a field in frontmatter, or \"::\" after an inline-field to trigger the autocompletion for Select and Multi fields Control field from links, file and plugin options Right click in the live preview, on a link, a file in explorer, or opening a file's or plugin's context menu will automatically display an item per target note's frontmatter field and \"inline fields\" (dataview syntax) these options are accessible from: the local menu in the live preview (right-click in the note) the context menu of a link, the context menu of a calendar day, the context menu of a file in the file explorer, the menu of a file the command palette \"Cmd+P\" : Metadata Menu - field options or insert field at cursor or manage field at cursor other context menu (not tested) Update free value field (type: Input ) Right-click on the link (or context menu, ...) Click on \"Update .... \" to change the field's value Change the value in the modal's prompt Type enter to save or click X or esc to cancel NB: if you have the natural language dates plugin installed, you can type the target date in natural langage and toggle the \ud83d\udcc6 selector to automatically convert the input into a link towards the daily note Update multiple free values field (type: Input ) Right-click on the link (or context menu, ...) Click on \"Update .... \" to change the field's value Change values comma-separated Press enter , the values will be displayed as an array of values in the target note's frontmatter field; or as a list of values comma separated in an inline field this doesn't work with indented lists YAML format Update boolean field (type: Boolean ) Right-click on the link (or context menu, ...) Click on \u2705 \u25b7 \u274c or \u274c \u25b7 \u2705 depending on the value of the boolean to change the value by its opposite Select a value for the field (type: Select ) Right-click on the link (or context menu, ...) Click on \"\ud83d\udd3d .... \" to change the field's value The modal will display a dropdown list with preset values Change the value in the modal's dropdown Click on the save button to save or click X or esc to cancel Multi select preset values for field (type: Multi ) Right-click on the link (or context menu, ...) Click on \"\ud83d\udff0 .... \" to change the field's value The modal will display a list for preset values Change the values by clicking on the values in the list Click on the save button to save or click X or esc to cancel, or click the trash button to empty the field Cycle through preset values (type: Cycle ) Right-click on the link (or context menu, ...) Click on \" .. > .. \" to change the field's value for the next one in the settings list Update a link to a file (type: File ) Right-click on the link (or context menu, ...) Click on \" \ud83d\udd0e Update ... \" Type or select the link within the modal Update a list of links to files (type: MultiFile ) Right-click on the link (or context menu, ...) Click on \" \ud83d\udd0e Update ... \" Click on the chosen links within the list Click on the save button to save or click X or esc to cancel, or click the trash button to empty the field Update a date (type: Date ) Right-click on the link (or context menu, ...) Click on \" \ud83d\udcc5 Update ... \" Type the date or select the date thanks to the date picker by clicking the \"\ud83d\udcc5\" button in the modal. If you have Natural Language Dates plugin installed, you can also type your date in natural language and have it parsed automatically 3bis. Click on \"\u23ed\" to shift the date in the future according to the interval set Toggle on the insert as link option if you want your date to be included as a link Add a new field at section Right-click on the link Click on \"Add field at section\" Select the line in the target file where you want to insert the new field Select the field Select/input the value for this field (if the field has preset values, you will be prompted to choose one) Add a new field at cursor In live preview, you can add a field at cursor without having to choose the section Insert all missing fields When fileClasses or Supercharged Tags are defined for a note, you can bulk insert all fields defined in those fileClasses that aren't yet included in the note You can also insert missing fields on a fileClass per fileClass mode : this option is also available in fileClass sub-menu, or next to fileClasses in the Metadata Menu modal (see Metadata Menu button ) Control field from dataview tables with dataviewjs using fieldModifier function included in metadata-menu API (see # Api), you can build modifiable fields within dataview table fieldModifier takes 4 arguments: dv: the dataview api p : the page your are currently iterating on fieldName: the name of the field you want to display (as string) attrs (optional): an object with the attributes you want to pass to the field: cls (optional): the class to be applied to the field attr (optional): the dataview attributes for the field (they will be included as data tags in the HTML rendering of the field) options (optional): an object containing specific options for Metadata Menu field modification options alwaysOn with options: {alwaysOn: true} the control for the field will always be displayed with options: {alwaysOn: false} (default) the control for the field won't always be displayed, you'll have to click on an intermediate button or hover the field to display the control showAddField with options: {showAddField: true} if the file has no corresponding field, a \"+\" button will be displayed to select a line in the target file where to add this field with options: {showAddField: false} (default) if the file has no corresponding field, a null value will be displayed inFrontmatter with options: {inFrontmatter: true} the field will automatically be inserted at the end of the frontmatter of the file if exists. If there's no frontmatter (or wrongly formatted frontmatter), a modal will be displayed to select the section where to insert the field with options: {inFrontmatter: false} (default) a modal will be displayed to select the section where to insert the field syntax /* dataviewjs block */ const { fieldModifier : f } = this . app . plugins . plugins [ \"metadata-menu\" ]. api // destruct metadata-menu api to use fieldModifier function and give an alias: \"f\" dv . table ([ \"file\" , \"Masterization\" , \"Tune\" ], dv . pages () . where ( p => p . fileClass === \"music\" ) . map ( p => [ p . file . link , f ( dv , p , \"masterization\" , { options : { alwaysOn : true }}), // pass dv (dataview api instance), p (the page), the field name to fieldModifier (: \"f\") and an object with options: {alwaysOn: true} so taht the control is always visible f ( dv , p , \"tune\" ) // pass dv (dataview api instance), p (the page), and the field name to fieldModifier (: \"f\") ]) ) ) Controls will be added to the dataview's table depending on the type of the field. Input when hovering the field you will get a \ud83d\udd8d button when clicking the button, an input field will replace the value. you can type a new value - type escape or click the \u274c button : the input will be replaced by the initial value - type enter or click the \u2705 button: the initial value will be replaced by the input value in the target note and the input field will be replaced by the value Boolean the value will be replaced by a checkbox: click on the checkbox to modify the value Number when hovering the field you will get 3 buttons: \u25c0\ufe0f, \ud83d\udd8d and \u25b6\ufe0f when clicking \ud83d\udd8d, an input field will replace the value. you can type a new value type escape or click the \u274c button : the input will be replaced by the initial value type enter or click the \u2705 button: the initial value will be replaced by the input value in the target note and the input field will be replaced by the value when clicking on \u25c0\ufe0f, you will decrement the value by 1 or by the value of step if defined when clicking on \u25b6\ufe0f, you will increment the value by 1 or by the value of step if defined Cycle when hovering the field you will a \u25b6\ufe0f button when clicking on \u25b6\ufe0f, you will replace the value of the field by the new option defined in field options Select Click to the arrow next to the value. The value of the field will then be replaced by a select field. Select another value to change the value Multi The values of this field are displayed as a chip component When hovering the value, a \"\u2795\" button will be added at the end of the list. When hovering a chip, a \"\u274c\" button will be added after the value When clicking on \"\u274c\", the value will be removed from the list of the values in the target field. When clicking on \"\u2795\", the values will be replaced by a select field in the table with the remaining values available (not already selected). Select the new value that you want to add: it will be added at the end of the list in the target field. File The values of this field are displayed as a link Click the \"\ud83d\udd0e\" button next to the link to display a suggester modal. Select a choice to replace the link in the target field. Date The values of this field are displayed as a date string or a as link Click the \"\ud83d\udcc6\" button next to the link to display a date select modal. type a new date (or select thanks to the datepicker) to replace the link in the target field. Click the \"\u23ed\" button to shift the date in the future according to the interval set Globally update lookup fields Lookup fields automatically update themselves. Even if you shouldn't modify a lookup field , if that happens the lookup field won't be automatically updated until one of its related notes is updated. If you want to force-update this lookup field you can use the command palette command Metadata Menu: Update lookup fields Metadata Menu button & Metadata Menu modal if one or more fileClass / Supercharged tag is defined for a note, you can display a button next to the note reference everywhere in your vault. When clicking this button, a modal will display all fields defined for those fileClasses and their values. From there you can - update a field - insert a field - change the setting of the field in its fileClass - see which field corresponds to which fileClass and the opposite - bulk insert missing fields (for all fileClasses, or or one fileClass in particular) The icon of the button can be customized in the fileClass with the higher priority (see icon )","title":"Controls"},{"location":"controls/#controls","text":"","title":"Controls"},{"location":"controls/#control-field-with-autocompletion","text":"In Editor mode, type \":\" after a field in frontmatter, or \"::\" after an inline-field to trigger the autocompletion for Select and Multi fields","title":"Control field with autocompletion"},{"location":"controls/#control-field-from-links-file-and-plugin-options","text":"Right click in the live preview, on a link, a file in explorer, or opening a file's or plugin's context menu will automatically display an item per target note's frontmatter field and \"inline fields\" (dataview syntax) these options are accessible from: the local menu in the live preview (right-click in the note) the context menu of a link, the context menu of a calendar day, the context menu of a file in the file explorer, the menu of a file the command palette \"Cmd+P\" : Metadata Menu - field options or insert field at cursor or manage field at cursor other context menu (not tested)","title":"Control field from links, file and plugin options"},{"location":"controls/#update-free-value-field-type-input","text":"Right-click on the link (or context menu, ...) Click on \"Update .... \" to change the field's value Change the value in the modal's prompt Type enter to save or click X or esc to cancel NB: if you have the natural language dates plugin installed, you can type the target date in natural langage and toggle the \ud83d\udcc6 selector to automatically convert the input into a link towards the daily note","title":"Update free value field (type: Input)"},{"location":"controls/#update-multiple-free-values-field-type-input","text":"Right-click on the link (or context menu, ...) Click on \"Update .... \" to change the field's value Change values comma-separated Press enter , the values will be displayed as an array of values in the target note's frontmatter field; or as a list of values comma separated in an inline field this doesn't work with indented lists YAML format","title":"Update multiple free values field (type: Input)"},{"location":"controls/#update-boolean-field-type-boolean","text":"Right-click on the link (or context menu, ...) Click on \u2705 \u25b7 \u274c or \u274c \u25b7 \u2705 depending on the value of the boolean to change the value by its opposite","title":"Update boolean field (type: Boolean)"},{"location":"controls/#select-a-value-for-the-field-type-select","text":"Right-click on the link (or context menu, ...) Click on \"\ud83d\udd3d .... \" to change the field's value The modal will display a dropdown list with preset values Change the value in the modal's dropdown Click on the save button to save or click X or esc to cancel","title":"Select a value for the field (type: Select)"},{"location":"controls/#multi-select-preset-values-for-field-type-multi","text":"Right-click on the link (or context menu, ...) Click on \"\ud83d\udff0 .... \" to change the field's value The modal will display a list for preset values Change the values by clicking on the values in the list Click on the save button to save or click X or esc to cancel, or click the trash button to empty the field","title":"Multi select preset values for field (type: Multi)"},{"location":"controls/#cycle-through-preset-values-type-cycle","text":"Right-click on the link (or context menu, ...) Click on \" .. > .. \" to change the field's value for the next one in the settings list","title":"Cycle through preset values (type: Cycle)"},{"location":"controls/#update-a-link-to-a-file-type-file","text":"Right-click on the link (or context menu, ...) Click on \" \ud83d\udd0e Update ... \" Type or select the link within the modal","title":"Update a link to a file (type: File)"},{"location":"controls/#update-a-list-of-links-to-files-type-multifile","text":"Right-click on the link (or context menu, ...) Click on \" \ud83d\udd0e Update ... \" Click on the chosen links within the list Click on the save button to save or click X or esc to cancel, or click the trash button to empty the field","title":"Update a list of links to files (type: MultiFile)"},{"location":"controls/#update-a-date-type-date","text":"Right-click on the link (or context menu, ...) Click on \" \ud83d\udcc5 Update ... \" Type the date or select the date thanks to the date picker by clicking the \"\ud83d\udcc5\" button in the modal. If you have Natural Language Dates plugin installed, you can also type your date in natural language and have it parsed automatically 3bis. Click on \"\u23ed\" to shift the date in the future according to the interval set Toggle on the insert as link option if you want your date to be included as a link","title":"Update a date (type: Date)"},{"location":"controls/#add-a-new-field-at-section","text":"Right-click on the link Click on \"Add field at section\" Select the line in the target file where you want to insert the new field Select the field Select/input the value for this field (if the field has preset values, you will be prompted to choose one)","title":"Add a new field at section"},{"location":"controls/#add-a-new-field-at-cursor","text":"In live preview, you can add a field at cursor without having to choose the section","title":"Add a new field at cursor"},{"location":"controls/#insert-all-missing-fields","text":"When fileClasses or Supercharged Tags are defined for a note, you can bulk insert all fields defined in those fileClasses that aren't yet included in the note You can also insert missing fields on a fileClass per fileClass mode : this option is also available in fileClass sub-menu, or next to fileClasses in the Metadata Menu modal (see Metadata Menu button )","title":"Insert all missing fields"},{"location":"controls/#control-field-from-dataview-tables-with-dataviewjs","text":"using fieldModifier function included in metadata-menu API (see # Api), you can build modifiable fields within dataview table fieldModifier takes 4 arguments: dv: the dataview api p : the page your are currently iterating on fieldName: the name of the field you want to display (as string) attrs (optional): an object with the attributes you want to pass to the field: cls (optional): the class to be applied to the field attr (optional): the dataview attributes for the field (they will be included as data tags in the HTML rendering of the field) options (optional): an object containing specific options for Metadata Menu field modification","title":"Control field from dataview tables with dataviewjs"},{"location":"controls/#options","text":"","title":"options"},{"location":"controls/#alwayson","text":"with options: {alwaysOn: true} the control for the field will always be displayed with options: {alwaysOn: false} (default) the control for the field won't always be displayed, you'll have to click on an intermediate button or hover the field to display the control","title":"alwaysOn"},{"location":"controls/#showaddfield","text":"with options: {showAddField: true} if the file has no corresponding field, a \"+\" button will be displayed to select a line in the target file where to add this field with options: {showAddField: false} (default) if the file has no corresponding field, a null value will be displayed","title":"showAddField"},{"location":"controls/#infrontmatter","text":"with options: {inFrontmatter: true} the field will automatically be inserted at the end of the frontmatter of the file if exists. If there's no frontmatter (or wrongly formatted frontmatter), a modal will be displayed to select the section where to insert the field with options: {inFrontmatter: false} (default) a modal will be displayed to select the section where to insert the field","title":"inFrontmatter"},{"location":"controls/#syntax","text":"/* dataviewjs block */ const { fieldModifier : f } = this . app . plugins . plugins [ \"metadata-menu\" ]. api // destruct metadata-menu api to use fieldModifier function and give an alias: \"f\" dv . table ([ \"file\" , \"Masterization\" , \"Tune\" ], dv . pages () . where ( p => p . fileClass === \"music\" ) . map ( p => [ p . file . link , f ( dv , p , \"masterization\" , { options : { alwaysOn : true }}), // pass dv (dataview api instance), p (the page), the field name to fieldModifier (: \"f\") and an object with options: {alwaysOn: true} so taht the control is always visible f ( dv , p , \"tune\" ) // pass dv (dataview api instance), p (the page), and the field name to fieldModifier (: \"f\") ]) ) ) Controls will be added to the dataview's table depending on the type of the field.","title":"syntax"},{"location":"controls/#input","text":"when hovering the field you will get a \ud83d\udd8d button when clicking the button, an input field will replace the value. you can type a new value - type escape or click the \u274c button : the input will be replaced by the initial value - type enter or click the \u2705 button: the initial value will be replaced by the input value in the target note and the input field will be replaced by the value","title":"Input"},{"location":"controls/#boolean","text":"the value will be replaced by a checkbox: click on the checkbox to modify the value","title":"Boolean"},{"location":"controls/#number","text":"when hovering the field you will get 3 buttons: \u25c0\ufe0f, \ud83d\udd8d and \u25b6\ufe0f when clicking \ud83d\udd8d, an input field will replace the value. you can type a new value type escape or click the \u274c button : the input will be replaced by the initial value type enter or click the \u2705 button: the initial value will be replaced by the input value in the target note and the input field will be replaced by the value when clicking on \u25c0\ufe0f, you will decrement the value by 1 or by the value of step if defined when clicking on \u25b6\ufe0f, you will increment the value by 1 or by the value of step if defined","title":"Number"},{"location":"controls/#cycle","text":"when hovering the field you will a \u25b6\ufe0f button when clicking on \u25b6\ufe0f, you will replace the value of the field by the new option defined in field options","title":"Cycle"},{"location":"controls/#select","text":"Click to the arrow next to the value. The value of the field will then be replaced by a select field. Select another value to change the value","title":"Select"},{"location":"controls/#multi","text":"The values of this field are displayed as a chip component When hovering the value, a \"\u2795\" button will be added at the end of the list. When hovering a chip, a \"\u274c\" button will be added after the value When clicking on \"\u274c\", the value will be removed from the list of the values in the target field. When clicking on \"\u2795\", the values will be replaced by a select field in the table with the remaining values available (not already selected). Select the new value that you want to add: it will be added at the end of the list in the target field.","title":"Multi"},{"location":"controls/#file","text":"The values of this field are displayed as a link Click the \"\ud83d\udd0e\" button next to the link to display a suggester modal. Select a choice to replace the link in the target field.","title":"File"},{"location":"controls/#date","text":"The values of this field are displayed as a date string or a as link Click the \"\ud83d\udcc6\" button next to the link to display a date select modal. type a new date (or select thanks to the datepicker) to replace the link in the target field. Click the \"\u23ed\" button to shift the date in the future according to the interval set","title":"Date"},{"location":"controls/#globally-update-lookup-fields","text":"Lookup fields automatically update themselves. Even if you shouldn't modify a lookup field , if that happens the lookup field won't be automatically updated until one of its related notes is updated. If you want to force-update this lookup field you can use the command palette command Metadata Menu: Update lookup fields","title":"Globally update lookup fields"},{"location":"controls/#metadata-menu-button-metadata-menu-modal","text":"if one or more fileClass / Supercharged tag is defined for a note, you can display a button next to the note reference everywhere in your vault. When clicking this button, a modal will display all fields defined for those fileClasses and their values. From there you can - update a field - insert a field - change the setting of the field in its fileClass - see which field corresponds to which fileClass and the opposite - bulk insert missing fields (for all fileClasses, or or one fileClass in particular) The icon of the button can be customized in the fileClass with the higher priority (see icon )","title":"Metadata Menu button &amp; Metadata Menu modal"},{"location":"fileclasses/","text":"FileClass Manage preset values based on the context of a file (fileClass) Dependency Dataview plugin required Define a class for a file and authorized fields for this class a class file is basically a simple note the name of the file will be the name of the class the lines of the file will be the fields managed for this class Define the folder where you want to store your class files (see settings above) Create a note in this folder, let's say music.md , containing lines with the name of fields, their type and options (see settings ) that you want to manage for this class music.md ========= genre:: {\"type\": \"Input\", \"options\": {\"0\": \"rock\", \"1\": \"pop\"}} difficulty::{\"type\": \"Number\" .... ... In a regular note, let's say Black Dog.md , insert a frontmatter field named fileClass The value of fileClass has to be the name of the file Class where you have the fields that you want to manage for this note. e.g in our case --- fileClass : music --- when right-clicking on a link to Black Dog.md , the fields in the context menu will be filter to show only the ones that are also included in music.md . Nested fileClasses You can sort your fileClasses in sub-folders. Then if you want to use them in a note, just type their sub-path fileClass: <sub-folder>/<sub-sub-folder>/<fileClass name> field settings syntax You can specify the type of a field in a fileClass, and its options. Type and Options are called \"field settings\" Type can be one of the types defined above (see ## Field Types) Options can be an array of options, or an object NB 1: Arrays will be converted in Objects after the first modification of the field through Manage <fileClass> Fields action in context menu (see below) NB 2: \"input\" type attributes dont need a setting, leaving the name of the attribute only will categorize this attribute automatically as an \"input\" type. A field settings is written in JSON (using double-quote only \" )and must be written as a value of and \"inline (dataview) field\" example Say you want to set fields in music.md fileClass : genre is a Multi field with \"rock\", \"pop\" and \"jazz\" as options, difficulty is a Number within [0, 100] that you want to decrement/increment by 5 masterization is a Cycle field with [\u2b50\ufe0f, \u2b50\ufe0f\u2b50\ufe0f, \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f, \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f, \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f] values tone is a Select field with [A, B, C, D, E, F, G] values artist is an Input field tab available is a Boolean field here is how the fileClass music file should be written music.md ========= genre:: {\"type\":\"Multi\", \"options\":[\"rock\", \"pop\", \"jazz\"]} difficulty:: {\"type\": \"Number\", \"options\": {\"step\": \"5\", \"min\": \"0\", \"max\": \"100\"}} masterization:: {\"type\":\"Cycle\", \"options\":[\"\u2b50\ufe0f\", \"\u2b50\ufe0f\u2b50\ufe0f\", \"\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\", \"\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\", \"\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\"]} tone:: {\"type\":\"Select\", \"options\":[\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"]} artist tab available:: {\"type\": \"Boolean\"} this music fileClass could also be written music.md ========= genre:: {\"type\":\"Multi\", \"options\":{\"0\":\"rock\", \"1\":\"pop\", \"2\": \"jazz\"} difficulty:: {\"type\": \"Number\", \"options\": {\"step\": \"5\", \"min\": \"0\", \"max\": \"100\"}} masterization:: {\"type\":\"Cycle\", \"options\":{\"0\": \"\u2b50\ufe0f\", \"1\": \"\u2b50\ufe0f\u2b50\ufe0f\", \"2\": \"\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\", \"3\": \"\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\", \"4\": \"\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\"}} tone:: {\"type\":\"Select\", \"options\":{\"0\": \"A\", \"1\": \"B\", \"2\": \"C\", \"3\": \"D\", \"4\": \"E\", \"5\": \"F\", \"6\": \"G\"}} artist:: {\"type\": \"Input\"} tab available:: {\"type\": \"Boolean\"} fileClass settings forms Because it can be overwhelming to remember this syntax, you can manage \"type\" and \"options\" for each fields from: - the context menu of a note that has this fileClass as a frontmatter's fileClass attribute : click on [ \u2699\ufe0f Manage <music> fields ] for music.md from any file with fileClass: music set in frontmatter - the more-options menu of a fileClass file - a command within a fileClass file ( alt+P ) -> Metadata Menu: fileClass attributes options You will be asked to choose the field that you want to modify or if you want to add a new one. After having selected a field, you will acces to a form to modify the type and options of the field (same form as in the plugin's settings ) fileClass inheritance extends field a fileClass can extend another fileClass to benefit of it's fields without having to rewrite them. It may be usefull if you have several fileClass with the same set of fields. For example you may have a fileClass named course.md with some fields like teacher , lecture , grade , type . And you may want to define more specific fields depending on the type of course: a first fileClass mathematics.md with a field chapter:: {\"type\": \"Select\", \"options\": {\"0\": \"Algebra\", \"1\": \"Geometry\", \"2\": \"Statistics\"}} and a second fileClass physics.md with a field lecture:: {\"type\": \"Select\", \"options\": {\"0\": \"Mecanics\", \"1\": \"Optics\", \"2\": \"Electricity\"}} . For the two of them, you want to benefit from the course fileClass's fields. You can do this very easily by using the extends field in their frontmatter. With our example: course.md teacher::{\"type\": \"Input\"} grade::{\"type\": \"Select\", \"options\":{\"0\": \"A\", \"1\": \"B\", \"2\": \"C\"}} type::{\"type\": \"Select\", \"options\":{\"0\": \"at school\", \"1\": \"online\", \"2\": \"personal teacher at home\"}} mathematics.md --- extends: course --- chapter::{\"type\": \"Select\", \"options\": {\"0\": \"Algebra\", \"1\": \"Geometry\", \"2\": \"Statistics\"}} to do next::{\"type\": \"File\", \"options\": {\"dvQueryString\": \"dv.pages('\\\"Courses\\\"')\"}} physics.md --- extends: course --- lecture:: {\"type\": \"Select\", \"options\": {\"0\": \"Mecanics\", \"1\": \"Optics\", \"2\": \"Electricity\"}} All notes with fileClass mathematics or physics will benefit from the fields of course with the same option, but they will have their own fields in addition to it ( chapter for mathematics , lecture for physics ) A fileClass can also override a field it has inherited from by defining it again. for example: physics.md --- extends: course --- lecture:: {\"type\": \"Select\", \"options\": {\"0\": \"Mecanics\", \"1\": \"Optics\", \"2\": \"Electricity\"}} type::{\"type\": \"Select\", \"options\":{\"0\": \"at school\", \"1\": \"online\"}} the type field in physics will override the one in course . notes with fileClass: physics will have at school and online options for type but not personal teacher at home excludes field when defined with an array of values, the field in the array won't be inherited from the parent fileClass With our previous example: physics.md --- extends: course excludes: [grade] --- lecture:: {\"type\": \"Select\", \"options\": {\"0\": \"Mecanics\", \"1\": \"Optics\", \"2\": \"Electricity\"}} notes with fileClass: physics will inherit teacher and type from course fileClass but not grade mapWithTag field : Supercharged Tag when this is set to true all notes including a tag with the same name will benefit from the fields' definitions of this fileclass you can also map a fileclass with his tag from the context menu of the fileclass This works with nested tags as well icon field you can customize the icon of the metadata button that gives access to a modal containing all available fields for a note bound with this fileclass the icon names are available from https://lucide.dev","title":"FileClasses"},{"location":"fileclasses/#fileclass","text":"Manage preset values based on the context of a file (fileClass) Dependency Dataview plugin required","title":"FileClass"},{"location":"fileclasses/#define-a-class-for-a-file-and-authorized-fields-for-this-class","text":"a class file is basically a simple note the name of the file will be the name of the class the lines of the file will be the fields managed for this class Define the folder where you want to store your class files (see settings above) Create a note in this folder, let's say music.md , containing lines with the name of fields, their type and options (see settings ) that you want to manage for this class music.md ========= genre:: {\"type\": \"Input\", \"options\": {\"0\": \"rock\", \"1\": \"pop\"}} difficulty::{\"type\": \"Number\" .... ... In a regular note, let's say Black Dog.md , insert a frontmatter field named fileClass The value of fileClass has to be the name of the file Class where you have the fields that you want to manage for this note. e.g in our case --- fileClass : music --- when right-clicking on a link to Black Dog.md , the fields in the context menu will be filter to show only the ones that are also included in music.md .","title":"Define a class for a file and authorized fields for this class"},{"location":"fileclasses/#nested-fileclasses","text":"You can sort your fileClasses in sub-folders. Then if you want to use them in a note, just type their sub-path fileClass: <sub-folder>/<sub-sub-folder>/<fileClass name>","title":"Nested fileClasses"},{"location":"fileclasses/#field-settings-syntax","text":"You can specify the type of a field in a fileClass, and its options. Type and Options are called \"field settings\" Type can be one of the types defined above (see ## Field Types) Options can be an array of options, or an object NB 1: Arrays will be converted in Objects after the first modification of the field through Manage <fileClass> Fields action in context menu (see below) NB 2: \"input\" type attributes dont need a setting, leaving the name of the attribute only will categorize this attribute automatically as an \"input\" type. A field settings is written in JSON (using double-quote only \" )and must be written as a value of and \"inline (dataview) field\"","title":"field settings syntax"},{"location":"fileclasses/#example","text":"Say you want to set fields in music.md fileClass : genre is a Multi field with \"rock\", \"pop\" and \"jazz\" as options, difficulty is a Number within [0, 100] that you want to decrement/increment by 5 masterization is a Cycle field with [\u2b50\ufe0f, \u2b50\ufe0f\u2b50\ufe0f, \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f, \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f, \u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f] values tone is a Select field with [A, B, C, D, E, F, G] values artist is an Input field tab available is a Boolean field here is how the fileClass music file should be written music.md ========= genre:: {\"type\":\"Multi\", \"options\":[\"rock\", \"pop\", \"jazz\"]} difficulty:: {\"type\": \"Number\", \"options\": {\"step\": \"5\", \"min\": \"0\", \"max\": \"100\"}} masterization:: {\"type\":\"Cycle\", \"options\":[\"\u2b50\ufe0f\", \"\u2b50\ufe0f\u2b50\ufe0f\", \"\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\", \"\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\", \"\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\"]} tone:: {\"type\":\"Select\", \"options\":[\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\"]} artist tab available:: {\"type\": \"Boolean\"} this music fileClass could also be written music.md ========= genre:: {\"type\":\"Multi\", \"options\":{\"0\":\"rock\", \"1\":\"pop\", \"2\": \"jazz\"} difficulty:: {\"type\": \"Number\", \"options\": {\"step\": \"5\", \"min\": \"0\", \"max\": \"100\"}} masterization:: {\"type\":\"Cycle\", \"options\":{\"0\": \"\u2b50\ufe0f\", \"1\": \"\u2b50\ufe0f\u2b50\ufe0f\", \"2\": \"\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\", \"3\": \"\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\", \"4\": \"\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\u2b50\ufe0f\"}} tone:: {\"type\":\"Select\", \"options\":{\"0\": \"A\", \"1\": \"B\", \"2\": \"C\", \"3\": \"D\", \"4\": \"E\", \"5\": \"F\", \"6\": \"G\"}} artist:: {\"type\": \"Input\"} tab available:: {\"type\": \"Boolean\"}","title":"example"},{"location":"fileclasses/#fileclass-settings-forms","text":"Because it can be overwhelming to remember this syntax, you can manage \"type\" and \"options\" for each fields from: - the context menu of a note that has this fileClass as a frontmatter's fileClass attribute : click on [ \u2699\ufe0f Manage <music> fields ] for music.md from any file with fileClass: music set in frontmatter - the more-options menu of a fileClass file - a command within a fileClass file ( alt+P ) -> Metadata Menu: fileClass attributes options You will be asked to choose the field that you want to modify or if you want to add a new one. After having selected a field, you will acces to a form to modify the type and options of the field (same form as in the plugin's settings )","title":"fileClass settings forms"},{"location":"fileclasses/#fileclass-inheritance","text":"","title":"fileClass inheritance"},{"location":"fileclasses/#extends-field","text":"a fileClass can extend another fileClass to benefit of it's fields without having to rewrite them. It may be usefull if you have several fileClass with the same set of fields. For example you may have a fileClass named course.md with some fields like teacher , lecture , grade , type . And you may want to define more specific fields depending on the type of course: a first fileClass mathematics.md with a field chapter:: {\"type\": \"Select\", \"options\": {\"0\": \"Algebra\", \"1\": \"Geometry\", \"2\": \"Statistics\"}} and a second fileClass physics.md with a field lecture:: {\"type\": \"Select\", \"options\": {\"0\": \"Mecanics\", \"1\": \"Optics\", \"2\": \"Electricity\"}} . For the two of them, you want to benefit from the course fileClass's fields. You can do this very easily by using the extends field in their frontmatter. With our example: course.md teacher::{\"type\": \"Input\"} grade::{\"type\": \"Select\", \"options\":{\"0\": \"A\", \"1\": \"B\", \"2\": \"C\"}} type::{\"type\": \"Select\", \"options\":{\"0\": \"at school\", \"1\": \"online\", \"2\": \"personal teacher at home\"}} mathematics.md --- extends: course --- chapter::{\"type\": \"Select\", \"options\": {\"0\": \"Algebra\", \"1\": \"Geometry\", \"2\": \"Statistics\"}} to do next::{\"type\": \"File\", \"options\": {\"dvQueryString\": \"dv.pages('\\\"Courses\\\"')\"}} physics.md --- extends: course --- lecture:: {\"type\": \"Select\", \"options\": {\"0\": \"Mecanics\", \"1\": \"Optics\", \"2\": \"Electricity\"}} All notes with fileClass mathematics or physics will benefit from the fields of course with the same option, but they will have their own fields in addition to it ( chapter for mathematics , lecture for physics ) A fileClass can also override a field it has inherited from by defining it again. for example: physics.md --- extends: course --- lecture:: {\"type\": \"Select\", \"options\": {\"0\": \"Mecanics\", \"1\": \"Optics\", \"2\": \"Electricity\"}} type::{\"type\": \"Select\", \"options\":{\"0\": \"at school\", \"1\": \"online\"}} the type field in physics will override the one in course . notes with fileClass: physics will have at school and online options for type but not personal teacher at home","title":"extends field"},{"location":"fileclasses/#excludes-field","text":"when defined with an array of values, the field in the array won't be inherited from the parent fileClass With our previous example: physics.md --- extends: course excludes: [grade] --- lecture:: {\"type\": \"Select\", \"options\": {\"0\": \"Mecanics\", \"1\": \"Optics\", \"2\": \"Electricity\"}} notes with fileClass: physics will inherit teacher and type from course fileClass but not grade","title":"excludes field"},{"location":"fileclasses/#mapwithtag-field-supercharged-tag","text":"when this is set to true all notes including a tag with the same name will benefit from the fields' definitions of this fileclass you can also map a fileclass with his tag from the context menu of the fileclass This works with nested tags as well","title":"mapWithTag field : Supercharged Tag"},{"location":"fileclasses/#iconfield","text":"you can customize the icon of the metadata button that gives access to a modal containing all available fields for a note bound with this fileclass the icon names are available from https://lucide.dev","title":"iconfield"},{"location":"general/","text":"General Concepts Metadata Menu can manage any metadata field located in frontmatter (YAML syntax) or in the body of the note with the syntax field:: (dataview style, dataview plugin is required) Field Types Metadata Menu gives a type to each field. Available types are: Input (free text) : this is the default type applied to each field if nothing is set for this field (see #Field settings). it will Accept any value Boolean : a field that can Accept true or false or null value Number : a field that can Accept a number (float) value, optionaly within a range ( min , max ) and can be in/decremented by a step value (default 1) Select : a field that can Accept a single value from a list Multi : a field that can Accept multiple values from a list Cycle : a field that will Cycle through values from a list File : a field that will Accept a link to a file from your vault MultiFile : a field that will Accept multiple links Date : a field that will Accept a date Lookup : a field that will Accept a lookup query Formula : a field that will Make Calculation based on note's fields Field settings By default each field is an Input You can define a field setting for each field. A field setting is composed of: a name a type (see Field Types list above) options depending on the type A field setting can defined in: Metadata Menu settings (see # Metadata Menu Settings) in a fileClass note (see # Fileclass , Dataview plugin is required) Priority management NB: if a field has a setting defined in the Metadata Menu settings AND in a fileClass note, the setting of the fileClass will take the priority over the setting defined in Metadata Menu settings See detailed section settings Controls a Field can be modified or added from several locations: autocompletion within the editor mode Obsidian and plugins menus : file explorer, note, calendar, context menu of a link, many other plugins not fully tested ... dataview table if you have dataview plugin installed See detailed section controls","title":"General Concepts"},{"location":"general/#general-concepts","text":"Metadata Menu can manage any metadata field located in frontmatter (YAML syntax) or in the body of the note with the syntax field:: (dataview style, dataview plugin is required)","title":"General Concepts"},{"location":"general/#field-types","text":"Metadata Menu gives a type to each field. Available types are: Input (free text) : this is the default type applied to each field if nothing is set for this field (see #Field settings). it will Accept any value Boolean : a field that can Accept true or false or null value Number : a field that can Accept a number (float) value, optionaly within a range ( min , max ) and can be in/decremented by a step value (default 1) Select : a field that can Accept a single value from a list Multi : a field that can Accept multiple values from a list Cycle : a field that will Cycle through values from a list File : a field that will Accept a link to a file from your vault MultiFile : a field that will Accept multiple links Date : a field that will Accept a date Lookup : a field that will Accept a lookup query Formula : a field that will Make Calculation based on note's fields","title":"Field Types"},{"location":"general/#field-settings","text":"By default each field is an Input You can define a field setting for each field. A field setting is composed of: a name a type (see Field Types list above) options depending on the type A field setting can defined in: Metadata Menu settings (see # Metadata Menu Settings) in a fileClass note (see # Fileclass , Dataview plugin is required) Priority management NB: if a field has a setting defined in the Metadata Menu settings AND in a fileClass note, the setting of the fileClass will take the priority over the setting defined in Metadata Menu settings See detailed section settings","title":"Field settings"},{"location":"general/#controls","text":"a Field can be modified or added from several locations: autocompletion within the editor mode Obsidian and plugins menus : file explorer, note, calendar, context menu of a link, many other plugins not fully tested ... dataview table if you have dataview plugin installed See detailed section controls","title":"Controls"},{"location":"settings/","text":"Metadata Menu settings Global settings Display field options in context menu if toggled on : Metadata Menu will display one control item per field in the target note in the context menu. That could result in a very large context menu if the target note has many fields if toggled off : Metadata Menu will display a \"Field Options\" item in the context menu. You can access control items through a modal display by clicking on \"Field Options\". Globally ignored fields the fields listed here (comma separated) won't be available in context menus First day of week For Date fields' datepicker, select the day the week should start with (default Monday ) Preset Field settings If you want a field to be globally managed throughout your whole vault you can add a new field setting : - Click on \"+\" - Type the field name - Select the type of field (see ## Field Types) - Set the options Select , Multi , Cycle options Select the source of values for this field You have to choose the source of values for your select field between 4 sources: Values defined in these setting : enter the Preset Options one by one, sort them Values from a note : enter the Path of the note containing the values Values returned from a dataview query : create a dataview function to return a list of values Path of the note containing the values You can define the list of values in a note. This note must contain a value per line. You have to type the full path to the note in the Path of the note containing the values field (don't forget the .md extension) Preset options you can add preset values (options) directly in the setting form by clicking the Add button in the Preset Options section. You can rearrange the order of the options. This order is used to display the values in the dropdown lists and is the order used to cycle through values. If both Path of the note containing the values and preset options , the first one will have the priority. Dataview function Dataview query returning a list of string. The dataview api can be accessed with the dv variable, and the current page (dv.page object) is available with the current variable example: dv.pages('#student').map(p => p.name) Input options You can define a template to help fill your Input field. Every item enclosed in curly braces will be transformed into an input or a dropdown select in the field modal. You can modify the \"templatized\" text afterwards. standard input syntax : {{name}} dropdown select input syntax : {{level: [\"Beginner\", \"Intermediate\", \"Advanced\"]}} Number options Step If step (float) is defined, its value will be used to decrement or increment the field. If step is not defined, increment and decrement will be done with a step of 1 Min If min (float) is defined, you won't be able to set or change the value of the field with a value less than min (an error will be displayed) Max If max (float) is defined, you won't be able to set or change the value of the field with a value greater than max (an error will be displayed) File , MultiFile options Dataview query accepts a call to the api function dv.pages that will return pages from your vault according to this function. Dataview api can be accessed with the dv variable, and the current page (dv.page object) is available with the current variable you\u2019ll have to use dv.pages function explained here : https://blacksmithgu.github.io/obsidian-dataview/api/code-reference/#dvpagessource it takes a \u00ab source \u00bb (explained here https://blacksmithgu.github.io/obsidian-dataview/api/code-reference/#dvpagessource): you can also improve the filtering by applying a combination of other functions to the result returned by dv.pages(source): dv.pages(\u2026).where(\u2026) dv.pages(\u2026).filter(\u2026) dv.pages(\u2026).limit(\u2026) etc you can combine them: dv.pages(\u2026).where(\u2026).limit(...) see documentation here https://blacksmithgu.github.io/obsidian-dataview/api/data-array/#raw-interface A good source of help to build dataview queries is the obsidian discord server > plugin-advanced > dataview : the community is really helpful there. Alias accepts a javascript instruction returning a string using dataview page attribute example: \"\ud83d\ude80\" + (page.surname || page.file.name) Sorting order accepts a javascript instruction returning a number using two files a and b example 1: a.basename < b.basename ? 1 : -1 example 2: b.stat.ctime - b.stat.ctime Date options Date Format The output format of the date as string following moment.js's syntax for formatting tokens : https://momentjs.com/docs/#/displaying/format/ Link path If you want to render your date as a link to a note, specify the path of the folder where the note should be. Insert as link by default Toggle on if you want the option to insert the date as a link to be selected by default when creating/modifying a date field. Shift Interval The time duration used to shift the date in the future. You can use several durations: year month week day hour minute second and even a combination of them Example of shift intervals: 2 days , 1 week 3 days , ... Shift Intervals field You can define intervals in a cycle field, for example for increasing intervals used in spaced repetition. Put the name of this cycle field in the Shift Interval field setting, and those intervals will be used to shift the date in the future. Lookup options A lookup field will look for targetted fields (aka related field) in targetted notes (aka Dataview JS Query results) and display the result in a presistent manner. Unlike a dataview view, a lookup field will change the content of the file by updating the value of the lookup field. So even if you disable dataview plugin, the lookup field will still contain the value. Lookup fields can therefore be \"published\". Pages to look for in your vault (DataviewJS Query) A DataviewJS query of the form dv.pages(...) that has to return a data array of page object (see Dataview Pages source definition ) Name of the related field The name of the field that the plugin should look for in pages returned by the query. The plugin will filter the results returned by the query with to match the value of the related field with the source note's link Type of output Lookup field can display the result in a very various ways: Links list Simple list of links of the notes matching the query, comma separated Links indented list Just like Links list , displayed as a bullet list below the field Built-in Summarizing function NB: For this option you'll have to set the name of the target field on which you want to apply the built-in function in the Summarized field name input (not necessary for the CountAll function) Sum : sum of the values of a specific field in the notes returned by the query Count : Counts all pages matching the query where the \"Summarized field\" is non empty CountAll : Counts all the pages matching the query Average : Returns the average value of summarized fields in the pages matching the query Max : Returns the maximum value of summarized fields in the pages matching the query Min : Returns the minimum value of summarized fields in the pages matching the query Custom list rendering function like the Links option, but you can customize the way each value is displayed. The object page is available (see Dataview page object for all attributes available in the page object ) and can be used to build your output. The output has to be a string. Custom indented list rendering function Just like the Custom list . Displayed as a bullet list below the field Custom summarizing function like the Built-in summarizing function option but you can customize the function you want to apply on the data array of pages returned by the query. The pages data array object is available. You have the write the code of the function, this function has to return something. Example1: return pages.length Example2: const i=0.0;const sum = pages.reduce((p, c) => p + c[\"age\"], i); return sum / pages.length Fileclass settings If you want the same field to have different behaviours depending on the note they belong to, you can define field settings based on the \"class\" of the \"note\". This is a particular frontmatter attribute that you will have to give to your note. By default, this attribute is named fileClass A FileClass is a specific note located in a defined folder. In this note you will set the fields settings for each note that has a fileClass attribute equal to the name of the fileClass note (without .md extension). See # Fileclass section for details about how to write a fileClass fileClass files folder In Metadata Menu, you'll have to set the location of fileClass notes: type the path to the fileClass files folder in the class Files Path setting (don't forget the trailing slash) fileClass alias You may find usefull to combine the fileClass attribute with an other attribute that you already use to categorize your notes (category, type, kind, area, ....). You can give an alias to fileClass attribute in fileClass field alias setting so that you can use the same name to manage the fields and for your other current usage. Global fileClass You can define a fileClass that will be applicable to all of your notes, even if there is no fileClass attribute defined in their frontmatter. This is usefull if you are more confortable with setting your preset fields in a note rather than in the plugin settings. If global fileClass is null or unproperly configured, the preset fields defined in the plugin settings will have the priority. fileClass queries You can define fileClasses to be applicable to every file matching a dataview query. (same syntax as for File type fields) If a File matches several queries, the last matching fileClass (starting from the top) will be applicable to this file. Show extra button to access metadata menu form When a note has one or more fileClass (or supercharged tags ) you can display a button next to the note's : - links in reading mode - links in live preview - file in file explorer - reference in star panel - reference in search panel - reference in backlinks panel - tab header each option has its own toggler Migrate Historically most of this plugin's features were available in Supercharged links plugin. In order to better scale, those features have been removed from Supercharged links . By clicking the Copy button, you can import the settings from Supercharged links to avoid setting everything again from the ground up. Warning: this will replace your whole settings, so be cautious not to override your work.","title":"Settings"},{"location":"settings/#metadata-menu-settings","text":"","title":"Metadata Menu settings"},{"location":"settings/#global-settings","text":"","title":"Global settings"},{"location":"settings/#display-field-options-in-context-menu","text":"if toggled on : Metadata Menu will display one control item per field in the target note in the context menu. That could result in a very large context menu if the target note has many fields if toggled off : Metadata Menu will display a \"Field Options\" item in the context menu. You can access control items through a modal display by clicking on \"Field Options\".","title":"Display field options in context menu"},{"location":"settings/#globally-ignored-fields","text":"the fields listed here (comma separated) won't be available in context menus","title":"Globally ignored fields"},{"location":"settings/#first-day-of-week","text":"For Date fields' datepicker, select the day the week should start with (default Monday )","title":"First day of week"},{"location":"settings/#preset-field-settings","text":"If you want a field to be globally managed throughout your whole vault you can add a new field setting : - Click on \"+\" - Type the field name - Select the type of field (see ## Field Types) - Set the options","title":"Preset Field settings"},{"location":"settings/#select-multi-cycle-options","text":"","title":"Select, Multi, Cycle options"},{"location":"settings/#select-the-source-of-values-for-this-field","text":"You have to choose the source of values for your select field between 4 sources: Values defined in these setting : enter the Preset Options one by one, sort them Values from a note : enter the Path of the note containing the values Values returned from a dataview query : create a dataview function to return a list of values","title":"Select the source of values for this field"},{"location":"settings/#path-of-the-note-containing-the-values","text":"You can define the list of values in a note. This note must contain a value per line. You have to type the full path to the note in the Path of the note containing the values field (don't forget the .md extension)","title":"Path of the note containing the values"},{"location":"settings/#preset-options","text":"you can add preset values (options) directly in the setting form by clicking the Add button in the Preset Options section. You can rearrange the order of the options. This order is used to display the values in the dropdown lists and is the order used to cycle through values. If both Path of the note containing the values and preset options , the first one will have the priority.","title":"Preset options"},{"location":"settings/#dataview-function","text":"Dataview query returning a list of string. The dataview api can be accessed with the dv variable, and the current page (dv.page object) is available with the current variable example: dv.pages('#student').map(p => p.name)","title":"Dataview function"},{"location":"settings/#input-options","text":"You can define a template to help fill your Input field. Every item enclosed in curly braces will be transformed into an input or a dropdown select in the field modal. You can modify the \"templatized\" text afterwards.","title":"Input options"},{"location":"settings/#standard-input","text":"syntax : {{name}}","title":"standard input"},{"location":"settings/#dropdown-select-input","text":"syntax : {{level: [\"Beginner\", \"Intermediate\", \"Advanced\"]}}","title":"dropdown select input"},{"location":"settings/#number-options","text":"","title":"Number options"},{"location":"settings/#step","text":"If step (float) is defined, its value will be used to decrement or increment the field. If step is not defined, increment and decrement will be done with a step of 1","title":"Step"},{"location":"settings/#min","text":"If min (float) is defined, you won't be able to set or change the value of the field with a value less than min (an error will be displayed)","title":"Min"},{"location":"settings/#max","text":"If max (float) is defined, you won't be able to set or change the value of the field with a value greater than max (an error will be displayed)","title":"Max"},{"location":"settings/#file-multifile-options","text":"Dataview query accepts a call to the api function dv.pages that will return pages from your vault according to this function. Dataview api can be accessed with the dv variable, and the current page (dv.page object) is available with the current variable you\u2019ll have to use dv.pages function explained here : https://blacksmithgu.github.io/obsidian-dataview/api/code-reference/#dvpagessource it takes a \u00ab source \u00bb (explained here https://blacksmithgu.github.io/obsidian-dataview/api/code-reference/#dvpagessource): you can also improve the filtering by applying a combination of other functions to the result returned by dv.pages(source): dv.pages(\u2026).where(\u2026) dv.pages(\u2026).filter(\u2026) dv.pages(\u2026).limit(\u2026) etc you can combine them: dv.pages(\u2026).where(\u2026).limit(...) see documentation here https://blacksmithgu.github.io/obsidian-dataview/api/data-array/#raw-interface A good source of help to build dataview queries is the obsidian discord server > plugin-advanced > dataview : the community is really helpful there. Alias accepts a javascript instruction returning a string using dataview page attribute example: \"\ud83d\ude80\" + (page.surname || page.file.name) Sorting order accepts a javascript instruction returning a number using two files a and b example 1: a.basename < b.basename ? 1 : -1 example 2: b.stat.ctime - b.stat.ctime","title":"File, MultiFile options"},{"location":"settings/#date-options","text":"","title":"Date options"},{"location":"settings/#date-format","text":"The output format of the date as string following moment.js's syntax for formatting tokens : https://momentjs.com/docs/#/displaying/format/","title":"Date Format"},{"location":"settings/#link-path","text":"If you want to render your date as a link to a note, specify the path of the folder where the note should be.","title":"Link path"},{"location":"settings/#insert-as-link-by-default","text":"Toggle on if you want the option to insert the date as a link to be selected by default when creating/modifying a date field.","title":"Insert as link by default"},{"location":"settings/#shift-interval","text":"The time duration used to shift the date in the future. You can use several durations: year month week day hour minute second and even a combination of them Example of shift intervals: 2 days , 1 week 3 days , ...","title":"Shift Interval"},{"location":"settings/#shift-intervals-field","text":"You can define intervals in a cycle field, for example for increasing intervals used in spaced repetition. Put the name of this cycle field in the Shift Interval field setting, and those intervals will be used to shift the date in the future.","title":"Shift Intervals field"},{"location":"settings/#lookup-options","text":"A lookup field will look for targetted fields (aka related field) in targetted notes (aka Dataview JS Query results) and display the result in a presistent manner. Unlike a dataview view, a lookup field will change the content of the file by updating the value of the lookup field. So even if you disable dataview plugin, the lookup field will still contain the value. Lookup fields can therefore be \"published\".","title":"Lookup options"},{"location":"settings/#pages-to-look-for-in-your-vault-dataviewjs-query","text":"A DataviewJS query of the form dv.pages(...) that has to return a data array of page object (see Dataview Pages source definition )","title":"Pages to look for in your vault (DataviewJS Query)"},{"location":"settings/#name-of-the-related-field","text":"The name of the field that the plugin should look for in pages returned by the query. The plugin will filter the results returned by the query with to match the value of the related field with the source note's link","title":"Name of the related field"},{"location":"settings/#type-of-output","text":"Lookup field can display the result in a very various ways:","title":"Type of output"},{"location":"settings/#links-list","text":"Simple list of links of the notes matching the query, comma separated","title":"Links list"},{"location":"settings/#links-indented-list","text":"Just like Links list , displayed as a bullet list below the field","title":"Links indented list"},{"location":"settings/#built-in-summarizing-function","text":"NB: For this option you'll have to set the name of the target field on which you want to apply the built-in function in the Summarized field name input (not necessary for the CountAll function) Sum : sum of the values of a specific field in the notes returned by the query Count : Counts all pages matching the query where the \"Summarized field\" is non empty CountAll : Counts all the pages matching the query Average : Returns the average value of summarized fields in the pages matching the query Max : Returns the maximum value of summarized fields in the pages matching the query Min : Returns the minimum value of summarized fields in the pages matching the query","title":"Built-in Summarizing function"},{"location":"settings/#custom-list-rendering-function","text":"like the Links option, but you can customize the way each value is displayed. The object page is available (see Dataview page object for all attributes available in the page object ) and can be used to build your output. The output has to be a string.","title":"Custom list rendering function"},{"location":"settings/#custom-indented-list-rendering-function","text":"Just like the Custom list . Displayed as a bullet list below the field","title":"Custom indented list rendering function"},{"location":"settings/#custom-summarizing-function","text":"like the Built-in summarizing function option but you can customize the function you want to apply on the data array of pages returned by the query. The pages data array object is available. You have the write the code of the function, this function has to return something. Example1: return pages.length Example2: const i=0.0;const sum = pages.reduce((p, c) => p + c[\"age\"], i); return sum / pages.length","title":"Custom summarizing function"},{"location":"settings/#fileclass-settings","text":"If you want the same field to have different behaviours depending on the note they belong to, you can define field settings based on the \"class\" of the \"note\". This is a particular frontmatter attribute that you will have to give to your note. By default, this attribute is named fileClass A FileClass is a specific note located in a defined folder. In this note you will set the fields settings for each note that has a fileClass attribute equal to the name of the fileClass note (without .md extension). See # Fileclass section for details about how to write a fileClass","title":"Fileclass settings"},{"location":"settings/#fileclass-files-folder","text":"In Metadata Menu, you'll have to set the location of fileClass notes: type the path to the fileClass files folder in the class Files Path setting (don't forget the trailing slash)","title":"fileClass files folder"},{"location":"settings/#fileclass-alias","text":"You may find usefull to combine the fileClass attribute with an other attribute that you already use to categorize your notes (category, type, kind, area, ....). You can give an alias to fileClass attribute in fileClass field alias setting so that you can use the same name to manage the fields and for your other current usage.","title":"fileClass alias"},{"location":"settings/#global-fileclass","text":"You can define a fileClass that will be applicable to all of your notes, even if there is no fileClass attribute defined in their frontmatter. This is usefull if you are more confortable with setting your preset fields in a note rather than in the plugin settings. If global fileClass is null or unproperly configured, the preset fields defined in the plugin settings will have the priority.","title":"Global fileClass"},{"location":"settings/#fileclass-queries","text":"You can define fileClasses to be applicable to every file matching a dataview query. (same syntax as for File type fields) If a File matches several queries, the last matching fileClass (starting from the top) will be applicable to this file.","title":"fileClass queries"},{"location":"settings/#show-extra-button-to-access-metadata-menu-form","text":"When a note has one or more fileClass (or supercharged tags ) you can display a button next to the note's : - links in reading mode - links in live preview - file in file explorer - reference in star panel - reference in search panel - reference in backlinks panel - tab header each option has its own toggler","title":"Show extra button to access metadata menu form"},{"location":"settings/#migrate","text":"Historically most of this plugin's features were available in Supercharged links plugin. In order to better scale, those features have been removed from Supercharged links . By clicking the Copy button, you can import the settings from Supercharged links to avoid setting everything again from the ground up. Warning: this will replace your whole settings, so be cautious not to override your work.","title":"Migrate"}]}